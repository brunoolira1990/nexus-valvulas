# Docker Compose para Nexus Válvulas - Produção Windows 11 Pro
# Configuração otimizada para Windows com melhorias de performance e compatibilidade

version: '3.8'

services:
  # Banco de dados PostgreSQL otimizado para Windows
  database:
    image: postgres:15-alpine
    container_name: nexus-database-win
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nexus_valvulas}
      POSTGRES_USER: ${POSTGRES_USER:-nexus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nexus_password}
      # Otimizações específicas para Windows
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_win:/var/lib/postgresql/data
      - ./backup:/backup
      # Cache otimizado para Windows
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - nexus-network-win
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nexus_user} -d ${POSTGRES_DB:-nexus_valvulas}"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Otimizações para Windows
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Backend Node.js otimizado para Windows
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.windows
      target: production
    container_name: nexus-backend-win
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://${POSTGRES_USER:-nexus_user}:${POSTGRES_PASSWORD:-nexus_password}@database:5432/${POSTGRES_DB:-nexus_valvulas}?schema=public
      PUBLIC_URL: ${PUBLIC_URL:-http://localhost}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
      # Otimizações específicas para Windows
      NODE_OPTIONS: "--max-old-space-size=1024"
      UV_THREADPOOL_SIZE: 16
    volumes:
      - backend_uploads_win:/app/uploads
      - backend_logs_win:/app/logs
      # Volume compartilhado para Windows
      - ./shared:/app/shared
    ports:
      - "4000:4000"
    networks:
      - nexus-network-win
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/test"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend React otimizado para Windows
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.windows
      target: production
    container_name: nexus-frontend-win
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - nexus-network-win
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx otimizado para Windows com SSL
  nginx:
    image: nginx:alpine
    container_name: nexus-nginx-win
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-windows.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_win:/var/log/nginx
      # Cache otimizado para Windows
      - nginx_cache_win:/var/cache/nginx
    networks:
      - nexus-network-win
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis otimizado para Windows
  redis:
    image: redis:7-alpine
    container_name: nexus-redis-win
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_win:/data
    ports:
      - "6379:6379"
    networks:
      - nexus-network-win
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoramento com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus-win
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_win:/prometheus
    networks:
      - nexus-network-win
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Volumes otimizados para Windows
volumes:
  postgres_data_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  backend_uploads_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  backend_logs_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  nginx_logs_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx-logs
  nginx_cache_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/nginx-cache
  redis_data_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  prometheus_data_win:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus

# Rede otimizada para Windows
networks:
  nexus-network-win:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: nexus-bridge-win
    ipam:
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1