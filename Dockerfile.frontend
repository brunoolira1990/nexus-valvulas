# Dockerfile para Frontend React + Vite + PWA
# Otimizado para produção com multi-stage build
# Resolve problema do Husky instalando todas as dependências durante o build

# Estágio 1: Build do frontend (com todas as dependências)
FROM node:18-alpine AS builder

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY package*.json ./

# Instalar TODAS as dependências (dev + prod) para que Husky funcione
# O Husky precisa das dependências de desenvolvimento para executar o script prepare
RUN npm ci --silent

# Copiar código fonte
COPY . .

# Build da aplicação para produção
# O Vite vai gerar apenas os arquivos necessários para produção
RUN npm run build:prod

# Estágio 2: Desenvolvimento
FROM node:18-alpine AS development
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
EXPOSE 3000
CMD ["npm", "run", "dev"]

# Estágio 3: Servidor Nginx para servir arquivos estáticos (PRODUÇÃO)
FROM nginx:alpine AS production

# Instalar dependências necessárias para health check
RUN apk add --no-cache curl

# Copiar apenas os arquivos buildados do estágio anterior
# A imagem final não contém node_modules, código fonte, etc.
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configuração customizada do Nginx para frontend
COPY nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Criar diretório para logs
RUN mkdir -p /var/log/nginx

# Expor porta 80
EXPOSE 80

# Health check para verificar se o servidor está funcionando
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Comando para iniciar o Nginx
CMD ["nginx", "-g", "daemon off;"]
