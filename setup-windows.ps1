# Script PowerShell para Configura√ß√£o Inicial - Nexus V√°lvulas Windows 11 Pro
# Execute como Administrador para configura√ß√£o inicial completa

param(
    [switch]$SkipDockerCheck = $false,
    [switch]$SkipDirectoryCreation = $false,
    [switch]$SkipEnvSetup = $false
)

# Configura√ß√µes
$ProjectName = "nexus-valvulas-win"
$ComposeFile = "docker-compose.windows-prod.yml"
$EnvFile = "env.windows.production"
$BackupDir = ".\backup"
$DataDir = ".\data"

# Cores para output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"
$Cyan = "Cyan"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Write-Banner {
    Write-ColorOutput "`n" $White
    Write-ColorOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" $Cyan
    Write-ColorOutput "‚ïë                                                              ‚ïë" $Cyan
    Write-ColorOutput "‚ïë           NEXUS V√ÅLVULAS - CONFIGURA√á√ÉO INICIAL              ‚ïë" $Cyan
    Write-ColorOutput "‚ïë                    WINDOWS 11 PRO                            ‚ïë" $Cyan
    Write-ColorOutput "‚ïë                                                              ‚ïë" $Cyan
    Write-ColorOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" $Cyan
    Write-ColorOutput "`n" $White
}

function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Test-DockerDesktop {
    try {
        $dockerVersion = docker version --format "{{.Server.Version}}" 2>$null
        if ($dockerVersion) {
            Write-ColorOutput "‚úì Docker Desktop encontrado (vers√£o: $dockerVersion)" $Green
            return $true
        }
        else {
            Write-ColorOutput "‚úó Docker Desktop n√£o encontrado ou n√£o est√° rodando" $Red
            return $false
        }
    }
    catch {
        Write-ColorOutput "‚úó Erro ao verificar Docker Desktop: $($_.Exception.Message)" $Red
        return $false
    }
}

function Test-WSL2 {
    try {
        $wslVersion = wsl --list --verbose 2>$null
        if ($wslVersion -match "2") {
            Write-ColorOutput "‚úì WSL 2 est√° habilitado" $Green
            return $true
        }
        else {
            Write-ColorOutput "‚úó WSL 2 n√£o est√° habilitado" $Red
            return $false
        }
    }
    catch {
        Write-ColorOutput "‚úó Erro ao verificar WSL 2: $($_.Exception.Message)" $Red
        return $false
    }
}

function Install-DockerDesktop {
    Write-ColorOutput "`nüì• Instalando Docker Desktop..." $Blue
    
    $dockerUrl = "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe"
    $installerPath = "$env:TEMP\DockerDesktopInstaller.exe"
    
    try {
        Write-ColorOutput "Baixando Docker Desktop..." $Yellow
        Invoke-WebRequest -Uri $dockerUrl -OutFile $installerPath
        
        Write-ColorOutput "Executando instalador..." $Yellow
        Start-Process -FilePath $installerPath -ArgumentList "install", "--quiet" -Wait
        
        Write-ColorOutput "‚úì Docker Desktop instalado com sucesso!" $Green
        Write-ColorOutput "‚ö†Ô∏è  Reinicie o computador e execute este script novamente." $Yellow
        
        Remove-Item $installerPath -Force
        return $true
    }
    catch {
        Write-ColorOutput "‚úó Erro ao instalar Docker Desktop: $($_.Exception.Message)" $Red
        return $false
    }
}

function Create-Directories {
    Write-ColorOutput "`nüìÅ Criando estrutura de diret√≥rios..." $Blue
    
    $directories = @(
        "$DataDir\postgres",
        "$DataDir\uploads",
        "$DataDir\logs",
        "$DataDir\nginx-logs",
        "$DataDir\nginx-cache",
        "$DataDir\redis",
        "$DataDir\prometheus",
        "$BackupDir",
        ".\monitoring",
        ".\ssl"
    )
    
    foreach ($dir in $directories) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-ColorOutput "‚úì Criado: $dir" $Green
        }
        else {
            Write-ColorOutput "‚Ä¢ J√° existe: $dir" $Yellow
        }
    }
}

function Setup-EnvironmentFile {
    Write-ColorOutput "`n‚öôÔ∏è  Configurando arquivo de ambiente..." $Blue
    
    if (!(Test-Path $EnvFile)) {
        Write-ColorOutput "‚úó Arquivo $EnvFile n√£o encontrado!" $Red
        return $false
    }
    
    # Gerar senhas seguras
    $postgresPassword = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 32 | % {[char]$_})
    $jwtSecret = -join ((65..90) + (97..122) + (48..57) | Get-Random -Count 64 | % {[char]$_})
    
    # Atualizar arquivo de ambiente
    $envContent = Get-Content $EnvFile -Raw
    $envContent = $envContent -replace "POSTGRES_PASSWORD=.*", "POSTGRES_PASSWORD=$postgresPassword"
    $envContent = $envContent -replace "JWT_SECRET=.*", "JWT_SECRET=$jwtSecret"
    Set-Content -Path $EnvFile -Value $envContent
    
    Write-ColorOutput "‚úì Senhas geradas automaticamente" $Green
    Write-ColorOutput "‚ö†Ô∏è  Configure suas credenciais de email no arquivo $EnvFile" $Yellow
    
    return $true
}

function Test-SystemResources {
    Write-ColorOutput "`nüíª Verificando recursos do sistema..." $Blue
    
    # Verificar RAM
    $ram = Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty TotalPhysicalMemory
    $ramGB = [math]::Round($ram / 1GB, 2)
    
    if ($ramGB -ge 8) {
        Write-ColorOutput "‚úì RAM: $ramGB GB (suficiente)" $Green
    }
    else {
        Write-ColorOutput "‚ö†Ô∏è  RAM: $ramGB GB (recomendado: 8GB+)" $Yellow
    }
    
    # Verificar CPU
    $cpu = Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty NumberOfCores
    if ($cpu -ge 4) {
        Write-ColorOutput "‚úì CPU: $cpu cores (suficiente)" $Green
    }
    else {
        Write-ColorOutput "‚ö†Ô∏è  CPU: $cpu cores (recomendado: 4+)" $Yellow
    }
    
    # Verificar espa√ßo em disco
    $disk = Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object -ExpandProperty FreeSpace
    $diskGB = [math]::Round($disk / 1GB, 2)
    
    if ($diskGB -ge 50) {
        Write-ColorOutput "‚úì Espa√ßo em disco: $diskGB GB (suficiente)" $Green
    }
    else {
        Write-ColorOutput "‚ö†Ô∏è  Espa√ßo em disco: $diskGB GB (recomendado: 50GB+)" $Yellow
    }
}

function Show-NextSteps {
    Write-ColorOutput "`nüöÄ PR√ìXIMOS PASSOS:" $Blue
    Write-ColorOutput "`n1. Configure suas credenciais de email no arquivo $EnvFile" $Yellow
    Write-ColorOutput "2. Execute o deploy:" $Yellow
    Write-ColorOutput "   .\deploy-windows.ps1" $Cyan
    Write-ColorOutput "`n3. Acesse a aplica√ß√£o:" $Yellow
    Write-ColorOutput "   Frontend: http://localhost" $Cyan
    Write-ColorOutput "   Backend: http://localhost/api" $Cyan
    Write-ColorOutput "   Prometheus: http://localhost:9090" $Cyan
    Write-ColorOutput "`n4. Para gerenciar os servi√ßos:" $Yellow
    Write-ColorOutput "   .\manage-windows.ps1 -Action status" $Cyan
    Write-ColorOutput "`n5. Para fazer backup:" $Yellow
    Write-ColorOutput "   .\manage-windows.ps1 -Action backup" $Cyan
}

function Show-Troubleshooting {
    Write-ColorOutput "`nüîß SOLU√á√ÉO DE PROBLEMAS:" $Blue
    Write-ColorOutput "`n‚Ä¢ Docker n√£o inicia:" $Yellow
    Write-ColorOutput "  - Verifique se WSL 2 est√° habilitado" $White
    Write-ColorOutput "  - Reinicie o Docker Desktop" $White
    Write-ColorOutput "`n‚Ä¢ Containers n√£o sobem:" $Yellow
    Write-ColorOutput "  - Verifique logs: docker-compose logs" $White
    Write-ColorOutput "  - Verifique recursos dispon√≠veis" $White
    Write-ColorOutput "`n‚Ä¢ Problemas de performance:" $Yellow
    Write-ColorOutput "  - Ajuste recursos no Docker Desktop" $White
    Write-ColorOutput "  - Verifique uso de RAM/CPU" $White
    Write-ColorOutput "`n‚Ä¢ Para mais ajuda, consulte: README-WINDOWS-PRODUCTION.md" $Cyan
}

# Fun√ß√£o principal
function Main {
    Write-Banner
    
    # Verificar se √© administrador
    if (!(Test-Administrator)) {
        Write-ColorOutput "‚ùå Este script deve ser executado como Administrador!" $Red
        Write-ColorOutput "Clique com bot√£o direito no PowerShell e selecione 'Executar como administrador'" $Yellow
        exit 1
    }
    
    # Verificar recursos do sistema
    Test-SystemResources
    
    # Verificar Docker Desktop
    if (!$SkipDockerCheck) {
        if (!(Test-DockerDesktop)) {
            $install = Read-Host "Docker Desktop n√£o encontrado. Deseja instalar automaticamente? (s/n)"
            if ($install -eq "s" -or $install -eq "S") {
                if (Install-DockerDesktop) {
                    Write-ColorOutput "`n‚ö†Ô∏è  Reinicie o computador e execute este script novamente." $Yellow
                    exit 0
                }
            }
            else {
                Write-ColorOutput "`nüì• Baixe e instale o Docker Desktop de: https://www.docker.com/products/docker-desktop" $Blue
                exit 1
            }
        }
        
        # Verificar WSL 2
        if (!(Test-WSL2)) {
            Write-ColorOutput "`n‚ö†Ô∏è  WSL 2 n√£o est√° habilitado. Execute:" $Yellow
            Write-ColorOutput "wsl --install" $Cyan
            Write-ColorOutput "wsl --set-default-version 2" $Cyan
            exit 1
        }
    }
    
    # Criar diret√≥rios
    if (!$SkipDirectoryCreation) {
        Create-Directories
    }
    
    # Configurar arquivo de ambiente
    if (!$SkipEnvSetup) {
        Setup-EnvironmentFile
    }
    
    # Verificar arquivos necess√°rios
    $requiredFiles = @($ComposeFile, $EnvFile, "Dockerfile.frontend.windows", "backend/Dockerfile.windows")
    $missingFiles = @()
    
    foreach ($file in $requiredFiles) {
        if (!(Test-Path $file)) {
            $missingFiles += $file
        }
    }
    
    if ($missingFiles.Count -gt 0) {
        Write-ColorOutput "`n‚ùå Arquivos necess√°rios n√£o encontrados:" $Red
        foreach ($file in $missingFiles) {
            Write-ColorOutput "  ‚Ä¢ $file" $Red
        }
        Write-ColorOutput "`nCertifique-se de que todos os arquivos de configura√ß√£o est√£o presentes." $Yellow
        exit 1
    }
    
    Write-ColorOutput "`n‚úÖ CONFIGURA√á√ÉO INICIAL CONCLU√çDA!" $Green
    Show-NextSteps
    Show-Troubleshooting
    
    Write-ColorOutput "`nüéâ Sistema pronto para deploy!" $Green
}

# Executar fun√ß√£o principal
Main