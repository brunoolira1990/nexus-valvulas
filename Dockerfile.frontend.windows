# Dockerfile para Frontend React + Vite + PWA - Windows 11 Pro
# Otimizado para produção no Windows com melhorias de performance

# Estágio 1: Build do frontend (com todas as dependências)
FROM node:18-alpine AS builder

# Definir diretório de trabalho
WORKDIR /app

# Instalar dependências do sistema necessárias para Windows
RUN apk add --no-cache \
    curl \
    git \
    python3 \
    make \
    g++

# Copiar arquivos de dependências
COPY package*.json ./

# Instalar TODAS as dependências (dev + prod) para que Husky funcione
# Configurações otimizadas para Windows
RUN npm ci --silent --no-audit --no-fund \
    && npm cache clean --force

# Copiar código fonte
COPY . .

# Build da aplicação para produção com otimizações
RUN npm run build:prod

# Estágio 2: Desenvolvimento
FROM node:18-alpine AS development
WORKDIR /app
RUN apk add --no-cache curl git
COPY package*.json ./
RUN npm ci --silent
COPY . .
EXPOSE 3000
CMD ["npm", "run", "dev"]

# Estágio 3: Servidor Nginx para servir arquivos estáticos (PRODUÇÃO)
FROM nginx:alpine AS production

# Instalar dependências necessárias para health check e otimizações
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Configurar timezone para Brasil
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Copiar apenas os arquivos buildados do estágio anterior
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configuração customizada do Nginx para frontend Windows
COPY nginx-frontend-windows.conf /etc/nginx/conf.d/default.conf

# Criar diretórios necessários
RUN mkdir -p /var/log/nginx /var/cache/nginx /tmp/nginx

# Configurar permissões otimizadas para Windows
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /var/log/nginx \
    && chown -R nginx:nginx /var/cache/nginx

# Configurações de segurança
RUN chmod 755 /usr/share/nginx/html \
    && chmod 644 /usr/share/nginx/html/*

# Expor porta 80
EXPOSE 80

# Health check otimizado para Windows
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Comando para iniciar o Nginx com configurações otimizadas
CMD ["nginx", "-g", "daemon off;"]