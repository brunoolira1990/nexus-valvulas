generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String          @id @default(uuid())
  name        String
  slug        String          @unique
  description String?
  images      CategoryImage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  products    Product[]
}

model CategoryImage {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  url        String
  position   Int      @default(0)
  createdAt  DateTime @default(now())
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String    // hashed
  name      String?
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String         @id @default(uuid())
  title       String
  slug        String         @unique
  description String?
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      ProductImage[]
  pdfs        ProductPdf[]
  variants    Variant[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  quotes      Quote[]
}

model ProductImage {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  position  Int     @default(0)
  createdAt DateTime @default(now())
}

model ProductPdf {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  position  Int     @default(0)
  createdAt DateTime @default(now())
}

model Variant {
  id            String   @id @default(uuid())
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  type          String
  size          String
  specifications Json?
  drawingUrl    String?
  position      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Quote {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  variantType String?
  variantSize String?
  name       String
  email      String
  phone      String?
  message    String?
  createdAt  DateTime @default(now())
}

model BlogPost {
  id              String   @id @default(uuid())
  title           String
  slug            String   @unique
  content         String
  summary         String?
  cover_image     String?
  published       Boolean  @default(false)
  published_date  DateTime?
  meta_description String?
  keywords        String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  nome      String
  empresa   String?
  email     String
  telefone  String?
  assunto   String
  mensagem  String
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}